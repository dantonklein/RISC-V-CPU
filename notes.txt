RISC-V Architecture Notes


All instructions are 32-bits
Types of instructions:
R-Type instructions: register-to-register arithmetic and logical operations. two source registers and one destination register-to-register

I-Type instructions: immediate instructions. uses a 12 bit immediate value with two register operands

S-Type instructions: stores data from a register to memory. two register operands and a 12-bit immediate value for memory address offset

B-Type instructions: conditional branch operations, jumps to a differnet instruction based on a condition. two register operands as a 12-bit immediate value for the branch target address

U-Type instructions: operations with 20-bit immediate values, like loading a constat into a register

J-Type instruction: unconditional jump operations, one register operand and a 20-bit immediate value for the target address

Integer Registers:

32 integer registers that are 32 bits wide
x0: always zero
x1-x32 are general purpose with specific names
x1 (ra) return address register, stores the return address in a function call
x2 (sp) stack pointer register, stores the pointer for position in the stack
x3 (gp) global pointer register, stores the pointer for accessing global data
x4 (tp) thread pointer register,  stores the pointer for thread-local storage
x5-x11 (t0-t6) temporary registers, stores intermediate values during calculations
x10-x17 (a0-a7) argument registers, stores function arguments for passing
x8, x9, x18-x27 (s0-s11) saved registers, preserves values across function calls
x28-x31 (t3-t6) additional temporary registers

Memory Model: Both virtual and physical memory
Virtual Memory: abstraction layer between the processor and physical memory
Allows for:
Memory Isolation: Provides separate address space for a process which is better for security and stability
Memory Management: Allows the OS to manage memory by allocating and deallocating it
Address Space Extension: Allows for larger address space, to allow usage of disk space as secondary storage

Implemented using a multi-level page table that translates virtual addresses to physical addresses with table lookups

Physical memory is organized into a flat address space. It is accesses thru the memory model that translates virtual addresses to physical ones

Memory management unit (MMU): translates virtual addresses to physical ones using the multi-level page table mechanism
Supports multiple memory addressing modes:
Base+offset addressing: calculated by adding a base register value with an immediate offset value. useful for accessing element in an array or accessing variables in a functions stack frame
Immediate addressing: value provided by instruction. useful for global variables and constants
Register-indirect addressing: address is stored in a register and the instruction states with register to use. useful for pointers and dynamic memory allocation

RV32I instructions are 32 bits and are stored aligned in memory, in little-endian byte order

source registers: rs1 rs2
destination register: rd


RV32I Instruction Formats
R-type  funct7[31:25]    rs2[24:20] rs1[19:15] funct3[14:12] rd[11:7]         opcode[6:0]

I-type  imm[11:0][31:20]            rs1[19:15] funct3[14:12] rd[11:7]         opcode[6:0]

S-type  imm[11:5]     	 rs2[24:20] rs1[19:15] funct3[14:12] imm[4:0]         opcode[6:0]

SB-type imm[12]imm[10:5] rs2[24:20] rs1[19:15] funct3[14:12] imm[4:1] imm[11] opcode[6:0]

U-type  imm[31:12]                                           rd[11:7]         opcode[6:0]

UJ-type imm[20]imm[10:1]imm[11]imm[19:12]                     rd[11:7]         opcode[6:0]

RV32I opcode map
inst[6:2]  Action
00000		Loads
00001		Floating Point Extension
00010		
00011		Fences
00100		Arithmetic
00101		AUIPC
00110		RV64I
00111		
01000		Stores
01001		Floating Point Extension
01010		
01011		A Extension
01100		Arithmetic
01101		LUI  
01110		RV64I
01111		
10000		Floating Point Extension
10001		Floating Point Extension
10010		Floating Point Extension
10011		Floating Point Extension
10100		Floating Point Extension
10101		
10110		RV128I
10111		
11000		Branches
11001		JALR
11010		
11011		JAL
11100		System
11101		
11110		RV128I
11111		


COMP ARCH NOTES

7 great ideas in computer architecture

Use abstraction to simplify design: use abstractions to characterize the design at different levels of representation

Make the common case fast

Performance via parallelism

performance via pipelining

performance via prediction

hierarchy of memories

Five classical components of a computer are input, output, memory, datapath, and control