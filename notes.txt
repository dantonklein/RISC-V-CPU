RISC-V Architecture Notes


All instructions are 32-bits
Types of instructions:
R-Type instructions: register-to-register arithmetic and logical operations. two source registers and one destination register-to-register

I-Type instructions: immediate instructions. uses a 12 bit immediate value with two register operands

S-Type instructions: stores data from a register to memory. two register operands and a 12-bit immediate value for memory address offset

B-Type instructions: conditional branch operations, jumps to a differnet instruction based on a condition. two register operands as a 12-bit immediate value for the branch target address

U-Type instructions: operations with 20-bit immediate values, like loading a constat into a register

J-Type instruction: unconditional jump operations, one register operand and a 20-bit immediate value for the target address

Integer Registers:

32 integer registers that are 32 bits wide
x0: always zero
x1-x32 are general purpose with specific names
x1 (ra) return address register, stores the return address in a function call
x2 (sp) stack pointer register, stores the pointer for position in the stack
x3 (gp) global pointer register, stores the pointer for accessing global data
x4 (tp) thread pointer register,  stores the pointer for thread-local storage
x5-x11 (t0-t6) temporary registers, stores intermediate values during calculations
x10-x17 (a0-a7) argument registers, stores function arguments for passing
x8, x9, x18-x27 (s0-s11) saved registers, preserves values across function calls
x28-x31 (t3-t6) additional temporary registers

Memory Model: Both virtual and physical memory
Virtual Memory: abstraction layer between the processor and physical memory
Allows for:
Memory Isolation: Provides separate address space for a process which is better for security and stability
Memory Management: Allows the OS to manage memory by allocating and deallocating it
Address Space Extension: Allows for larger address space, to allow usage of disk space as secondary storage

Implemented using a multi-level page table that translates virtual addresses to physical addresses with table lookups

Physical memory is organized into a flat address space. It is accesses thru the memory model that translates virtual addresses to physical ones

Memory management unit (MMU): translates virtual addresses to physical ones using the multi-level page table mechanism
Supports multiple memory addressing modes:
Base+offset addressing: calculated by adding a base register value with an immediate offset value. useful for accessing element in an array or accessing variables in a functions stack frame
Immediate addressing: value provided by instruction. useful for global variables and constants
Register-indirect addressing: address is stored in a register and the instruction states with register to use. useful for pointers and dynamic memory allocation

RV32I instructions are 32 bits and are stored aligned in memory, in little-endian byte order

source registers: rs1 rs2
destination register: rd


RV32I Instruction Formats
R-type  funct7[31:25]    rs2[24:20] rs1[19:15] funct3[14:12] rd[11:7]         opcode[6:0]

I-type  imm[11:0][31:20]            rs1[19:15] funct3[14:12] rd[11:7]         opcode[6:0]

S-type  imm[11:5]     	 rs2[24:20] rs1[19:15] funct3[14:12] imm[4:0]         opcode[6:0]

SB-type imm[12]imm[10:5] rs2[24:20] rs1[19:15] funct3[14:12] imm[4:1] imm[11] opcode[6:0]

U-type  imm[31:12]                                           rd[11:7]         opcode[6:0]

UJ-type imm[20]imm[10:1]imm[11]imm[19:12]                     rd[11:7]         opcode[6:0]

RV32I opcode map
inst[6:2]  Action
00000		Loads
00001		Floating Point Extension
00010		
00011		Fences
00100		Arithmetic
00101		AUIPC
00110		RV64I
00111		
01000		Stores
01001		Floating Point Extension
01010		
01011		A Extension
01100		Arithmetic
01101		LUI  
01110		RV64I
01111		
10000		Floating Point Extension
10001		Floating Point Extension
10010		Floating Point Extension
10011		Floating Point Extension
10100		Floating Point Extension
10101		
10110		RV128I
10111		
11000		Branches
11001		JALR
11010		
11011		JAL
11100		System
11101		
11110		RV128I
11111		


COMP ARCH NOTES

7 great ideas in computer architecture

Use abstraction to simplify design: use abstractions to characterize the design at different levels of representation

Make the common case fast

Performance via parallelism

performance via pipelining

performance via prediction

hierarchy of memories

Five classical components of a computer are input, output, memory, datapath, and control

There are 32 registers and 2^30 memory words
Risc V is byte addressed, each word is separated by 4

Arithmetic.
add a, b, c : adds b and c and stores in a

Each arithmetic instruction only performs one operation and always has 3 variables

Design Principle 1: simplicity favors regularity
Design Principle 2: Smaller is faster
Design Principle 3: Good design demands good compromises
Registers are 32 bits

Data transfer instructions

Spilling registers: the proess of putting less frequently used variables into memory

x0 is hardwired to zero

Least significant bit is the right and most is the left

Risc V Fields (R type)
Funct7[31:25] RS2[24:20] RS1[19:15] Funct3[14:12] RD[11:7] Opcode[6:0]

Opcode: basic operation of the instruction
RD: Destination register
Funct3: 3 bits providing opcode information
RS1: first register source operand
RS2: second register source operand
funct7: 7 bits providing opcode information

I type: 
Immediate[31:20] RS1[19:15] Funct3[14:12] RD[11:7] Opcode[6:0]

12-bit immeddiate is twos complement, so it can represent numbers from -2048 to 2047

S type:
Immediate[31:25] RS2[24:20] RS1[19:15] Funct3[14:12] Immediate[11:7] Opcode[6:0]

The opcode field distinguishes between the type of instruction

x10-x17: regiters in which parameters are passed and returned
x1: return address register after the function is done

jump-and-link instruction (jal) jumps to a function and loads the return address in x1

jalr branches to the address stored in xn
jalr x0, 0(xn)

program counter: register that holds the address of the current instruction

stack pointer is x2

software designates x5-x7 and x28-x31 to not be preserved
and x8-x9 and x18-x27 to be preserved

procedure frame/activation record: the part of the stack containing a procedures saved registers and local variables

some risc v compilers use a frame pointer(x8) to point to the first word of the frame

for linux, the stack starts in the high end of the user addresses space and grows down
bottom of the memory is reserved
above that is the text segment, used for the machine code
above that is the static segment, used for constants and static variables
the heap/dynamic data segment is placed next

load upper immediate (lui) is used to load bits 31-12 for constants

RISC V uses PC-relative addressing for conditional branches and jumps.
program counter = program counter + branch offset

for jumps farther than 2^18 words you must use lui and jalr together

halfwords are used to represent the distance between the branch and branch target

atomic exchange or atomic swap: interchanges a value in a register for a value in memory

load-reserved word (lrw) and store-conditional word (sc.w)

if the contents of the memory location specified by lrw are changed before scw to the same address happens, then it fails

sc.w specifies 3 registers, one to hold the address, one to indicate if the atomic operation worked, and one to hold the value to be stored in memory

for translating C to assembly by hand, we follow these steps

1. allocate registers to program variables
2. produce code for the body of the procedure
3. preserve registers across the procedure invocation

void swap(int v[], size_t k)
{
	int temp;
	temp = v[k];
	v[k] = v[k+1];
	v[k+1] = temp;
}

parameters v and k will be passed in with x10 and x11, temp will be stored in x5
	
swap:

	slli x6, x11, 2 //reg x6 = k * 4
	add x6, x10, x6 //reg x6 = v + (k * 4)
	
	load v[k] using the byte address in x6
	
	lw x5, 0(x6) //reg x5 (temp) v[k]
	lw x7, 4(x6) //reg x7 = v[k+1]
	
	sw x7, 0(x6) //v[k] = reg x7
	sw x5, 4(x6) //v[1] = reg x5
	jalr x0, 0(x1) // return to calling routine
	
M extension: adds instructions too multiply and divide integers
A extension: supports atomic memory operations for multiprocessor synchronization
F and D extension: floating point
C: compressed extensions, 16 bit versions of common instructions

overflow occurs when adding two positive numbers and the sum is negative, and vice versa
subtraction overflow happens when a - number is subtracted from a positive one and u get negative
or when a + number is subtracted from a negative and you get positive

floating point numbers:
 s[31] exponent[30:23] fraction[22:0]
 
 (-1)^S x (1 + F) x 2^E
 
doubles:
s[63] exponent[62:51] fraction[50:0]

Every instruction has the same 2 steps:
1. send the program counter to the memory that contains the code and fetch the instruction from memory
2. read one or two registers, using fields of the instruction to select the registers to read. for lw, we need to read
only one register, but most other instructions require reading two

for the three instruction types (memory-reference, arithmetic-local, and branches) the actions are largely the same

all instruction classes use the alu after reading the registers
memory-reference instructions use the alu for address calculation and branches use it for equality


after the alu memory-reference instructions will need to acess the memory to either read or write data
arithmetic-logical and load instructions need to write the data to a register
conditioner branch needs to modify the program counter

For controlling the immediate generation logic it has to extend either 
31:20 for load instructions,
31:25 and 11:7 for store instructions,
or 31, 7, 30:25, and 11:8 for conditional branch

opcode bit 6 is 0 for loads and stores and 1 for branches
bit 5 is 0 for loads and 1 for stores

for alu control i will use a module called ALUOP, that takes in funct7 and funct3 and 2 bits from the opcode that controls the alu

5 pipeline stages:
1. fetch instruction from memory (IF)
2. read registers and decode the instruction (ID)
3. execute the operation or calculate an address (EX)
4. access an operand in data memory (MEM)
5. write the result into a register (WB)

three pipeline hazards

structural: hardware cannot support the combination of instructions that we want to execute in the same clock cycle
data: pipeline must be stalled because one step must wait for another to complete
this can happen when one instruction depends on an earlier one thats still in the pipeline

forwarding/bypassing: specialized hardware that obtains missing register data sooner

control hazard: caused by the need to make a decision based on the results of one instruction while others are executing
one solution: stall
other: branch prediction
dynamic branch prediction: change prediction based on whether the branch was taken or not

data forwarding:
We can check to see if RegWrite will be active by checking it during the ex and mem stages. if any instruction has rd be x0 you avoid forwarding it.

in the case when a result is available in both the ex/mem register and the mem/wb register you need to forward the ex/mem one since its more recent.
forwarding muxB(rs2) will go before the sign-extension/read-data2 mux.

For load instructions before a store, you would need forwarding in the mem stage for data from wb.
data forwarding does not work when an instruction tries to read a register following a load that writes to it.
this is because loads take 1 cycle.
if ( ex_memread and ex.regrd == id.regrs1/2) stall
in the case of this stall ID and IF would be stalled.
This can be achieved by preventing the PC register and the IF/ID register from changing

"bubbles" can be inserted in the pipeline stage by changing all control values to zero
we can set the ID/EX pipeline register control signals to zero
this can be achieved with the hazard detection unit

options for dealing with control hazards
assume branch not taken: if it is taken, the instructions that are being fetched must be discarded, execution continues at branch target
to discard instructions we need to change the control values to zero like before.
//we must also change the 3 instructions in if, id, and ex stages. 

for moving branch alu to ID stage, we need a data forwarding unit for it and a possible stall if the branch requires data from the instruction prior.

exception: any unexpected change in control flow
interrupt: externally caused
the basic action that a processor must perform when an exception occurs is to save the addy of the unfortunate
instruction in the supervisor exception program counter (SEPC) and transfer control to the os at some specific addy

two main methods to communicate the reason for an exception:
risc v uses a supervisor exception cause register (SCAUSE) which holds a field that indicates the reason for the exception

second method is to use vectored interrupts: the address to which control is transferred is determined by the cause of the exception
possibly added to a base register that points to a memory range for vectored interrupts

exceptions are a form of control hazard
when an exception occurs you must flush the instructions that follow the add instruction and begin fetching instructions from the new address
to flush instructions in the ID stage, we use the multiplexor in the ID stage that zeroes control signals for stalls (OR GATE WITH STALL)
to flush instructions in the EX stage, we make a new mux and use it to zero the control signals
must add another input to the PC MUX

if an instruction in the EX stage has an exception, the EX.Flush signal can be used to prevent the writing of the destination register in the write back stage (or any memory access stuff)
if its an exception that requires the instruction be completed, it can be restarted after the instruction is handled (lets say the exception is caused by an interrupt)

save the address of the offending instruction in the supervisor exception program counter
earliest instruction is interrupted first when multiple interrupts occur in the same clock cycle

Hardware needs to stop offending instruction in midstream, let all instructions complete, flush all following instructions, set a register to show the cause of the exception (SCAUSE), 
save the address of the offending instruction (SEPC), then jump to a prearranged address

The OS needs to look at the cause and act appropriately.
Lets say the exception is caused by an I/O device or os service call, the os would save the state of the program (save register data to memory lets say), do the required task, then restore the program and resume



1. exception/interrupt handling (ecall, ebreak, sret. wfi)
2. multiplication/division extension
3. floating point extension
4. atomic extension
5. memory translation stuff (fence.i, fence, sfence.vma)
6. Implement priveledge and csr stuff (csrrw, csrrs, csrrc, csrrwi, csrrsi, csrrci)


branching hardware causes instruction Fetch to fail timing constraints, will be creating another stage involving branch detection
add stall and flush to ID/JB register
add stall and flush to instruction ram in datapath
remove flush from control in datapath

modify hazard unit to accomodate state changes

performed interative timing analysis and optimization to achieve a clock frequency of 85 MHz